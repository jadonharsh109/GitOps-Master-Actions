# Name of the GitHub Actions workflow
name: "Deploy to CI Staging env"

# Trigger events for the workflow
on:
  # Allow manual triggering of the workflow
  workflow_dispatch:
    inputs:
      PR_number:
        description: "Pull Request Number"
        required: true

############ Define the jobs for the workflow ############
jobs:
  Creating-Staging:
    runs-on: ubuntu-latest
    defaults:
      run:
        shell: bash
    steps:
      - uses: actions/checkout@v3

      - name: Verify Pull Request Number
        uses: actions/github-script@v5
        id: verify_pr_number
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          result-encoding: string
          script: |
            const response = await github.rest.pulls.get({
                owner: context.repo.owner,
                repo: context.repo.repo,
                pull_number: ${{ github.event.inputs.PR_number }}
            });

            // Check if the pull request is open
            if (response.data.number !== ${{ github.event.inputs.PR_number }}) {
                throw new Error('Pull request is not open or number is not valid!');
            } else {
                console.log("PR ref: " + response.data.head.ref);
                return response.data.head.ref;
            }

      - name: terraform env setup
        uses: hashicorp/setup-terraform@v3
        with:
          cli_config_credentials_token: ${{ secrets.TF_API_TOKEN }}

      - name: Terraform Init
        id: init
        working-directory: terraform/staging
        run: terraform init

      - name: Terraform Plan
        id: plan
        working-directory: terraform/staging
        run: terraform plan -no-color -var instance_name="${{ github.event.inputs.PR_number }}"
        continue-on-error: true

      - name: Update Pull Request
        uses: actions/github-script@v5
        env:
          PLAN: "Terraform\n${{ steps.plan.outputs.stdout }}"
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const output = `#### Terraform Initialization ‚öôÔ∏è\`${{ steps.init.outcome }}\`
            #### Terraform Plan üìñ\`${{ steps.plan.outcome }}\`

            <details><summary>Show Plan</summary>

            \`\`\`\n
            ${process.env.PLAN}
            \`\`\`

            </details>

            *Pusher: @${{ github.actor }}, Action: \`${{ github.event_name }}\`*`;

            github.rest.issues.createComment({
              issue_number: ${{ github.event.inputs.PR_number }},
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: output
            })

      - name: Terraform Plan Status
        if: steps.plan.outcome == 'failure'
        run: exit 1

      - name: Terraform Apply
        id: apply
        working-directory: terraform/staging
        run: terraform apply -var instance_name="${{ github.event.inputs.PR_number }}" -auto-approve

      - name: Terraform Output
        id: apply_output
        working-directory: terraform/staging
        run: terraform output -raw -no-color Public_IP

      - name: Update Pull Request Again
        uses: actions/github-script@v5
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const output = `#### Terraform Apply ‚öôÔ∏è\`${{ steps.apply_output.outcome }}\`

            <details><summary>Show IP Address</summary>

            \`\`\`\n
            ${{ steps.apply_output.outputs.stdout }}
            \`\`\`

            </details>

            *Pusher: @${{ github.actor }}, Action: \`${{ github.event_name }}\`*`;

            github.rest.issues.createComment({
              issue_number: ${{ github.event.inputs.PR_number }},
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: output
            })

      - name: rsync deployments
        uses: burnett01/rsync-deployments@6.0.0
        with:
          switches: -avzr --delete
          path: ./app
          remote_path: /home/ubuntu
          remote_host: ${{ steps.apply_output.outputs.stdout }}
          remote_user: ubuntu
          remote_key: ${{ secrets.DEPLOY_KEY }}

      - name: Execute SSH commmands on remote server
        uses: JimCronqvist/action-ssh@master
        with:
          hosts: "ubuntu@${{ steps.apply_output.outputs.stdout }}"
          privateKey: ${{ secrets.DEPLOY_KEY }}
          command: |
            cd /home/ubuntu/app
            docker compose up -d

      - name: Update status
        uses: actions/github-script@v5
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const output = `#### Staging server created
            > PR #${{ github.event.inputs.PR_number }} has been deployed successfully

            URL: http://${{ steps.apply_output.outputs.stdout }}`;

            github.rest.issues.createComment({
              issue_number: ${{ github.event.inputs.PR_number }},
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: output
            })
