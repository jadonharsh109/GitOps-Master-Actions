# Name of the GitHub Actions workflow
name: "Build & Code Test"

# Trigger events for the workflow
on:
  pull_request:
    types:
      - opened
      - closed
    branches:
      - main
    paths:
      - "app/**"

############ Define the jobs for the workflow ############
jobs:
  ###### Job for initial setup and actions ######
  CI-Actions:
    runs-on: ubuntu-latest
    defaults:
      run:
        shell: bash
        working-directory: app
    steps:
      ###### Step 1: Checkout the repository ######
      - uses: actions/checkout@v4

      ###### Step 2: Set up JDK 11 for the build ######
      - name: Set up JDK 11
        uses: actions/setup-java@v1
        with:
          java-version: 11

      ###### Step 3: Build and analyze the code with SonarQube ######
      - name: Build and analyze
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
          SONAR_HOST_URL: ${{ secrets.SONAR_HOST_URL }}
        run: mvn -B verify org.sonarsource.scanner.maven:sonar-maven-plugin:sonar -Dsonar.projectKey=actions

      ###### Step 4: Wait for SonarQube Quality Gate ######
      - name: Wait for Quality Gate
        run: |
          echo "Waiting for SonarQube analysis to complete and quality gate status..."
          status=""
          until [ "$status" == "OK" ] || [ "$status" == "ERROR" ]; do
            sleep 30
            status=$(curl -s -u "${{ secrets.SONAR_TOKEN }}:" "${{ secrets.SONAR_HOST_URL }}/api/qualitygates/project_status?projectKey=actions" | jq -r '.projectStatus.status')
            echo "Quality gate status: $status"
          done
          if [ "$status" == "ERROR" ]; then
            echo "SonarQube quality gate check failed."
            exit 1
          fi
          echo "SonarQube quality gate check passed."

  Pre-Prod:
    if: github.event.pull_request.merged == true
    needs: CI-Actions
    runs-on: ubuntu-latest
    defaults:
      run:
        shell: bash
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build and push
        uses: docker/build-push-action@v5
        with:
          context: app
          push: true
          tags: ${{ secrets.DOCKERHUB_USERNAME }}/vprofile:${{ github.event.pull_request.number }},${{ secrets.DOCKERHUB_USERNAME }}/vprofile:latest

      - name: Run Dockle
        uses: erzz/dockle-action@v1
        with:
          image: ${{ secrets.DOCKERHUB_USERNAME }}/vprofile:${{ github.event.pull_request.number }}

      # Terraform environment setup
      - name: terraform env setup
        uses: hashicorp/setup-terraform@v3
        with:
          cli_config_credentials_token: ${{ secrets.TF_API_TOKEN }}

      # Terraform Initialization
      - name: Terraform Init
        id: init
        working-directory: terraform/pre-prod
        run: terraform init

      # Terraform Apply
      - name: Terraform Apply
        id: apply
        working-directory: terraform/pre-prod
        run: terraform apply --auto-approve

      # Terraform Output
      - name: Terraform Output
        id: apply_output
        working-directory: terraform/pre-prod
        run: terraform output -raw -no-color Public_IP

      # Execute SSH commands on remote server
      - name: Execute SSH commands on remote server
        uses: JimCronqvist/action-ssh@master
        with:
          hosts: "ubuntu@${{ steps.apply_output.outputs.stdout }}"
          privateKey: ${{ secrets.DEPLOY_KEY }}
          command: |
            cd /home/ubuntu/
            git clone https://github.com/jadonharsh109/GitOps-Master-Actions
            docker pull ${{ secrets.DOCKERHUB_USERNAME }}/vprofile
            docker compose -f GitOps-Master-Actions/app/docker-compose.pre-prod.yaml up -d --build
