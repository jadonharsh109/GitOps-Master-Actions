# Name of the GitHub Actions workflow
name: "Build & Code Test"

# Trigger events for the workflow
on:
  push:
    branches:
      - main
  pull_request:
    types: [closed]
    branches: [main]

############ Define the jobs for the workflow ############
jobs:
  ###### Job for initial setup and actions ######
  Initial-Actions:
    runs-on: ubuntu-latest
    defaults:
      run:
        shell: bash
        working-directory: app
    steps:
      ###### Step 1: Checkout the repository ######
      - uses: actions/checkout@v2

      ###### Step 2: Set up JDK 11 for the build ######
      - name: Set up JDK 11
        uses: actions/setup-java@v1
        with:
          java-version: 11

      ###### Step 3: Build and analyze the code with SonarQube ######
      - name: Build and analyze
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
          SONAR_HOST_URL: ${{ secrets.SONAR_HOST_URL }}
        run: mvn -B verify org.sonarsource.scanner.maven:sonar-maven-plugin:sonar -Dsonar.projectKey=actions

      ###### Step 4: Wait for SonarQube Quality Gate ######
      - name: Wait for Quality Gate
        run: |
          echo "Waiting for SonarQube analysis to complete and quality gate status..."
          status=""
          until [ "$status" == "OK" ] || [ "$status" == "ERROR" ]; do
            sleep 30
            status=$(curl -s -u "${{ secrets.SONAR_TOKEN }}:" "${{ secrets.SONAR_HOST_URL }}/api/qualitygates/project_status?projectKey=actions" | jq -r '.projectStatus.status')
            echo "Quality gate status: $status"
          done
          if [ "$status" == "ERROR" ]; then
            echo "SonarQube quality gate check failed."
            exit 1
          fi
          echo "SonarQube quality gate check passed."

      ###### Step 5: Packaging the Source Code ######
      - name: Packaging source code
        run: mvn package

  Destroying-Staging:
    runs-on: ubuntu-latest
    defaults:
      run:
        shell: bash

    steps:
      - name: Get PR details
        run: |
          echo "Pull Request Number: ${{ github.event.pull_request.number }}"
          echo "Pull Request Title: ${{ github.event.pull_request.title }}"
          echo "Merged By: ${{ github.event.pull_request.merged_by.login }}"
          echo "Merged at: ${{ github.event.pull_request.merged_at }}"
          echo "Base Branch: ${{ github.event.pull_request.base.ref }}"
          echo "Head Branch: ${{ github.event.pull_request.head.ref }}"
          echo "URL: ${{ github.event.pull_request.html_url }}"

      - name: terraform env setup
        uses: hashicorp/setup-terraform@v3
        with:
          cli_config_credentials_token: ${{ secrets.TF_API_TOKEN }}

      - name: Terraform Init
        id: init
        working-directory: terraform/staging
        run: terraform init

      - name: Terraform Destroy
        id: destroy
        working-directory: terraform/staging
        run: terraform destroy -var instance_name="${{ github.event.pull_request.number }}" -auto-approve
